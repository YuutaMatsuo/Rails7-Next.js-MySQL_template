version: '3.9'
services:
  backend: # Rails用のコンテナ
    build: 
      context: ./backend/ # Dockerfileのあるディレクトリを指定
      dockerfile: Dockerfile # Dockerfileのファイル名を指定
    # tmp/pids/server.pidが残ってたら `A server is already running. ~~` のエラーでrailsを起動できないので事前に消してから、`rails sever` する
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    # 上記のdbイメージで指定したユーザー名とパスワードをrails側でも指定するため環境変数に設定。
    environment: # 環境変数を指定 .envから取得する
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_HOST: ${MYSQL_HOST}
    # ホストのカレントディレクトリ(.)とイメージ内の/appディレクトリを同期させている
    volumes:
      - ./backend:/app
    ports:
      - "3000:3000"
    restart: always # コンテナが停止すると常に再起動
    tty: true # 疑似ターミナル (pseudo-TTY) を割り当て。https://docs.docker.jp/compose/compose-file/index.html#tty
    stdin_open: true # サービス コンテナに標準入力を割り当てて実行するよう設定(https://docs.docker.jp/compose/compose-file/index.html#stdin-open)。
    depends_on:
      - db
  frontend: # Next.js用のコンテナ
    build:
      context: ./frontend/ # Dockerfileのあるディレクトリを指定
      dockerfile: Dockerfile # Dockerfileのファイル名を指定
    # ホストのカレントディレクトリ(.)とイメージ内の/appディレクトリを同期させている
    volumes:
      - ./frontend/app:/usr/src/app
    command: 'yarn dev' # コンテナ起動時に実行するコマンド
    ports:
      - '8000:3000'
  db: # MySQL用のコンテナ
    image: mysql:8.0
    # 以下のオプションを指定しないと、dbの文字コードがutf8mb4にならない
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment: # 環境変数を指定 .envから取得する
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - 4306:3306
    # 無くても動くけど指定しておくとdocker-composeを停止してもdbの内容が永続化されるため、指定することが多いと思われる
    # https://matsuand.github.io/docs.docker.jp.onthefly/storage/volumes/
    volumes:
      - mysql-db:/var/lib/mysql
    restart: always # コンテナが停止すると常に再起動
volumes:
  mysql-db:
    driver: local # ローカルのディスクに保存する